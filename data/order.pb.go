// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: order.proto

package data

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarketSide int32

const (
	// BUY value means the user wants to buy from the market
	MarketSide_Buy MarketSide = 0
	// SELL value means the user wants to sell to the market
	MarketSide_Sell MarketSide = 1
)

// Enum value maps for MarketSide.
var (
	MarketSide_name = map[int32]string{
		0: "Buy",
		1: "Sell",
	}
	MarketSide_value = map[string]int32{
		"Buy":  0,
		"Sell": 1,
	}
)

func (x MarketSide) Enum() *MarketSide {
	p := new(MarketSide)
	*p = x
	return p
}

func (x MarketSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketSide) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[0].Descriptor()
}

func (MarketSide) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[0]
}

func (x MarketSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketSide.Descriptor instead.
func (MarketSide) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

type OrderType int32

const (
	// LimitOrder allows the trader to start an order where the transaction will be completed
	// if the market price is at or better than the set price
	OrderType_Limit OrderType = 0
	// MarketOrder completes the trade at the current market price
	OrderType_Market OrderType = 1
	// One cancel other, combination of limit take profit and stop loss orders
	OrderType_OCO OrderType = 2
	// One trigger other, combination of limit take profit and stop loss orders
	OrderType_OTO OrderType = 3
	// Strangle order, combination of 2 limit orders, sell high and buy low
	OrderType_Strangle OrderType = 4
	// Straddle order, combination of 2 stop orders, sell low and buy high
	OrderType_Straddle OrderType = 5
	// Trailing stop order
	OrderType_TrailingStop OrderType = 6
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "Limit",
		1: "Market",
		2: "OCO",
		3: "OTO",
		4: "Strangle",
		5: "Straddle",
		6: "TrailingStop",
	}
	OrderType_value = map[string]int32{
		"Limit":        0,
		"Market":       1,
		"OCO":          2,
		"OTO":          3,
		"Strangle":     4,
		"Straddle":     5,
		"TrailingStop": 6,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

type OrderStatus int32

const (
	// StatusPending is used when the order has not yet been processed by the matching engine
	OrderStatus_Pending OrderStatus = 0
	// StatusUntouched means that the order was processed by the engine but it did not yet match with any order
	OrderStatus_Untouched OrderStatus = 1
	// StatusPartiallyFilled is used when the order was not completely filled
	OrderStatus_PartiallyFilled OrderStatus = 2
	// StatusCancelled is used when the order has been cancelled
	OrderStatus_Cancelled OrderStatus = 3
	// StatusFilled is used when the order was filled and th
	OrderStatus_Filled OrderStatus = 4
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "Pending",
		1: "Untouched",
		2: "PartiallyFilled",
		3: "Cancelled",
		4: "Filled",
	}
	OrderStatus_value = map[string]int32{
		"Pending":         0,
		"Untouched":       1,
		"PartiallyFilled": 2,
		"Cancelled":       3,
		"Filled":          4,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[2].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[2]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

type StopLoss int32

const (
	// By default an order has its stop loss flag set to disabled
	StopLoss_None StopLoss = 0
	// Stop loss triggers when the last trade price changes to a value at or below the `StopPrice`
	StopLoss_Loss StopLoss = 1
	// Stop entry triggers when the last trade price changes to a value at or above the `StopPrice`
	StopLoss_Entry StopLoss = 2
)

// Enum value maps for StopLoss.
var (
	StopLoss_name = map[int32]string{
		0: "None",
		1: "Loss",
		2: "Entry",
	}
	StopLoss_value = map[string]int32{
		"None":  0,
		"Loss":  1,
		"Entry": 2,
	}
)

func (x StopLoss) Enum() *StopLoss {
	p := new(StopLoss)
	*p = x
	return p
}

func (x StopLoss) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopLoss) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[3].Descriptor()
}

func (StopLoss) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[3]
}

func (x StopLoss) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopLoss.Descriptor instead.
func (StopLoss) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

type CommandType int32

const (
	// A new order should be added in the order book
	CommandType_NewOrder CommandType = 0
	// An existing order should be cancelled if it's not already filled
	CommandType_CancelOrder CommandType = 1
	// The whole market should be archived and stored in a safe location
	// This command may not be needed since the engine should already create regular backups of the current orderbook
	CommandType_BackupMarket CommandType = 2
	// Order replace, currently used in oco_oto_processor
	CommandType_ReplaceOrder CommandType = 3
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "NewOrder",
		1: "CancelOrder",
		2: "BackupMarket",
		3: "ReplaceOrder",
	}
	CommandType_value = map[string]int32{
		"NewOrder":     0,
		"CancelOrder":  1,
		"BackupMarket": 2,
		"ReplaceOrder": 3,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[4].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[4]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

type AccountGroup int32

const (
	AccountGroup_Main  AccountGroup = 0
	AccountGroup_Bonus AccountGroup = 1
)

// Enum value maps for AccountGroup.
var (
	AccountGroup_name = map[int32]string{
		0: "Main",
		1: "Bonus",
	}
	AccountGroup_value = map[string]int32{
		"Main":  0,
		"Bonus": 1,
	}
)

func (x AccountGroup) Enum() *AccountGroup {
	p := new(AccountGroup)
	*p = x
	return p
}

func (x AccountGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[5].Descriptor()
}

func (AccountGroup) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[5]
}

func (x AccountGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountGroup.Descriptor instead.
func (AccountGroup) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{5}
}

type TrailingStopPriceTypeType int32

const (
	TrailingStopPriceTypeType_Percentage TrailingStopPriceTypeType = 0
	TrailingStopPriceTypeType_Absolute   TrailingStopPriceTypeType = 1
)

// Enum value maps for TrailingStopPriceTypeType.
var (
	TrailingStopPriceTypeType_name = map[int32]string{
		0: "Percentage",
		1: "Absolute",
	}
	TrailingStopPriceTypeType_value = map[string]int32{
		"Percentage": 0,
		"Absolute":   1,
	}
)

func (x TrailingStopPriceTypeType) Enum() *TrailingStopPriceTypeType {
	p := new(TrailingStopPriceTypeType)
	*p = x
	return p
}

func (x TrailingStopPriceTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrailingStopPriceTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[6].Descriptor()
}

func (TrailingStopPriceTypeType) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[6]
}

func (x TrailingStopPriceTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrailingStopPriceTypeType.Descriptor instead.
func (TrailingStopPriceTypeType) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{6}
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event type signals what operation can be executed on the market engine
	// 0 = New Order
	// 1 = Cancel Order
	// 2 = Backup Market
	EventType CommandType `protobuf:"varint,1,opt,name=EventType,proto3,enum=data.CommandType" json:"EventType,omitempty"`
	// The type of the order: 0=limit 1=market 2=oco 3=oto
	Type OrderType `protobuf:"varint,2,opt,name=Type,proto3,enum=data.OrderType" json:"Type,omitempty"`
	// Category int8 // deprecated by the Type field
	// The side of the market: 0=buy 1=sell
	Side MarketSide `protobuf:"varint,3,opt,name=Side,proto3,enum=data.MarketSide" json:"Side,omitempty"`
	// Optional:
	// Amount of coins to buy/sell with the order
	// - The amount must be greater than the base_min_amount for the product and no larger than the base_max_amount.
	Amount uint64 `protobuf:"varint,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	// Optional:
	// The price to pay for one unit in the market
	//   - The price must be specified in quote_increment product units.
	//   - The quote increment is the smallest unit of price. For the BTC-USD product,
	//     the quote increment is 0.01 or 1 penny. Prices less than 1 penny will not be accepted,
	//     and no fractional penny prices will be accepted. Not required for market orders.
	Price uint64 `protobuf:"varint,5,opt,name=Price,proto3" json:"Price,omitempty"`
	// Stop flag. Requires `StopPrice“ to be defined.
	// Stop orders become active and wait to trigger based on the movement of the last trade price.
	// There are 2 types of stop orders: 0=none 1=loss 2=entry
	// - Stop loss triggers when the last trade price changes to a value at or below the `StopPrice`.
	// - Stop entry triggers when the last trade price changes to a value at or above the `StopPrice`.
	// - Note that when triggered, stop orders execute as either market or limit orders, depending on the type.
	Stop StopLoss `protobuf:"varint,6,opt,name=Stop,proto3,enum=data.StopLoss" json:"Stop,omitempty"`
	// Sets trigger price for stop order. Only if stop is defined.
	StopPrice uint64 `protobuf:"varint,7,opt,name=StopPrice,proto3" json:"StopPrice,omitempty"`
	// Maximum total funds to use for the order
	//   - The funds field is optionally used for market orders. When specified it indicates how much of the product
	//     quote currency to buy or sell. For example, a market buy for BTC-USD with funds specified as 150.00 will
	//     spend 150 USD to buy BTC (including any fees). If the funds field is not specified for a market buy order,
	//     size must be specified and the enting will use available funds in your account to buy bitcoin.
	//   - A market sell order can also specify the funds. If funds is specified, it will limit the sell to the amount
	//     of funds specified. You can use funds with sell orders to limit the amount of quote currency funds received.
	Funds uint64 `protobuf:"varint,8,opt,name=Funds,proto3" json:"Funds,omitempty"`
	// ******************************************
	// Common fields
	// ******************************************
	// The id of the order
	ID uint64 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty"`
	// The market for which this order is for. Ex: eth-btc
	Market string `protobuf:"bytes,10,opt,name=Market,proto3" json:"Market,omitempty"`
	// The status is dictated by the stage in the execution of the order by the matching engine
	// 0 = Pending
	// 1 = Untouched
	// 2 = Partially Filled
	// 3 = Cancelled
	// 4 = Filled
	Status OrderStatus `protobuf:"varint,11,opt,name=Status,proto3,enum=data.OrderStatus" json:"Status,omitempty"`
	// The unique identifier the account that added the order
	OwnerID uint64 `protobuf:"varint,12,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
	// Take profit price for OTO/OCO orders
	TakeProfitPrice uint64 `protobuf:"varint,13,opt,name=TakeProfitPrice,proto3" json:"TakeProfitPrice,omitempty"`
	// Stop Loss price for OTO/OCO orders
	StopLossPrice uint64 `protobuf:"varint,14,opt,name=StopLossPrice,proto3" json:"StopLossPrice,omitempty"`
	// Child order type for OTO orders
	OtoType OrderType `protobuf:"varint,15,opt,name=OtoType,proto3,enum=data.OrderType" json:"OtoType,omitempty"`
	// deprecated
	AccountGroup AccountGroup `protobuf:"varint,16,opt,name=AccountGroup,proto3,enum=data.AccountGroup" json:"AccountGroup,omitempty"`
	SubAccount   uint64       `protobuf:"varint,17,opt,name=SubAccount,proto3" json:"SubAccount,omitempty"`
	// Activation price for trailing stop orders
	TrailingStopActivationPrice uint64 `protobuf:"varint,18,opt,name=TrailingStopActivationPrice,proto3" json:"TrailingStopActivationPrice,omitempty"`
	// Stop price for trailing stop orders
	TrailingStopPrice     uint64                    `protobuf:"varint,19,opt,name=TrailingStopPrice,proto3" json:"TrailingStopPrice,omitempty"`
	TrailingStopPriceType TrailingStopPriceTypeType `protobuf:"varint,20,opt,name=TrailingStopPriceType,proto3,enum=data.TrailingStopPriceTypeType" json:"TrailingStopPriceType,omitempty"`
	// The amount filled in the order
	FilledAmount uint64 `protobuf:"varint,21,opt,name=FilledAmount,proto3" json:"FilledAmount,omitempty"`
	// The amount of used funds from the funds
	UsedFunds            uint64      `protobuf:"varint,22,opt,name=UsedFunds,proto3" json:"UsedFunds,omitempty"`
	TPAmount             uint64      `protobuf:"varint,23,opt,name=TPAmount,proto3" json:"TPAmount,omitempty"`
	SLAmount             uint64      `protobuf:"varint,24,opt,name=SLAmount,proto3" json:"SLAmount,omitempty"`
	FilledOppositeAmount uint64      `protobuf:"varint,25,opt,name=FilledOppositeAmount,proto3" json:"FilledOppositeAmount,omitempty"`
	FeeAmount            uint64      `protobuf:"varint,26,opt,name=FeeAmount,proto3" json:"FeeAmount,omitempty"`
	TPFilledAmount       uint64      `protobuf:"varint,27,opt,name=TPFilledAmount,proto3" json:"TPFilledAmount,omitempty"`
	SLFilledAmount       uint64      `protobuf:"varint,28,opt,name=SLFilledAmount,proto3" json:"SLFilledAmount,omitempty"`
	LockedFunds          uint64      `protobuf:"varint,29,opt,name=LockedFunds,proto3" json:"LockedFunds,omitempty"`
	TPOrderId            uint64      `protobuf:"varint,30,opt,name=TPOrderId,proto3" json:"TPOrderId,omitempty"`
	SLOrderId            uint64      `protobuf:"varint,31,opt,name=SLOrderId,proto3" json:"SLOrderId,omitempty"`
	RootOrderId          uint64      `protobuf:"varint,32,opt,name=RootOrderId,proto3" json:"RootOrderId,omitempty"`
	TPStatus             OrderStatus `protobuf:"varint,33,opt,name=TPStatus,proto3,enum=data.OrderStatus" json:"TPStatus,omitempty"`
	SLStatus             OrderStatus `protobuf:"varint,34,opt,name=SLStatus,proto3,enum=data.OrderStatus" json:"SLStatus,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetEventType() CommandType {
	if x != nil {
		return x.EventType
	}
	return CommandType_NewOrder
}

func (x *Order) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_Limit
}

func (x *Order) GetSide() MarketSide {
	if x != nil {
		return x.Side
	}
	return MarketSide_Buy
}

func (x *Order) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Order) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetStop() StopLoss {
	if x != nil {
		return x.Stop
	}
	return StopLoss_None
}

func (x *Order) GetStopPrice() uint64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *Order) GetFunds() uint64 {
	if x != nil {
		return x.Funds
	}
	return 0
}

func (x *Order) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Order) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *Order) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_Pending
}

func (x *Order) GetOwnerID() uint64 {
	if x != nil {
		return x.OwnerID
	}
	return 0
}

func (x *Order) GetTakeProfitPrice() uint64 {
	if x != nil {
		return x.TakeProfitPrice
	}
	return 0
}

func (x *Order) GetStopLossPrice() uint64 {
	if x != nil {
		return x.StopLossPrice
	}
	return 0
}

func (x *Order) GetOtoType() OrderType {
	if x != nil {
		return x.OtoType
	}
	return OrderType_Limit
}

func (x *Order) GetAccountGroup() AccountGroup {
	if x != nil {
		return x.AccountGroup
	}
	return AccountGroup_Main
}

func (x *Order) GetSubAccount() uint64 {
	if x != nil {
		return x.SubAccount
	}
	return 0
}

func (x *Order) GetTrailingStopActivationPrice() uint64 {
	if x != nil {
		return x.TrailingStopActivationPrice
	}
	return 0
}

func (x *Order) GetTrailingStopPrice() uint64 {
	if x != nil {
		return x.TrailingStopPrice
	}
	return 0
}

func (x *Order) GetTrailingStopPriceType() TrailingStopPriceTypeType {
	if x != nil {
		return x.TrailingStopPriceType
	}
	return TrailingStopPriceTypeType_Percentage
}

func (x *Order) GetFilledAmount() uint64 {
	if x != nil {
		return x.FilledAmount
	}
	return 0
}

func (x *Order) GetUsedFunds() uint64 {
	if x != nil {
		return x.UsedFunds
	}
	return 0
}

func (x *Order) GetTPAmount() uint64 {
	if x != nil {
		return x.TPAmount
	}
	return 0
}

func (x *Order) GetSLAmount() uint64 {
	if x != nil {
		return x.SLAmount
	}
	return 0
}

func (x *Order) GetFilledOppositeAmount() uint64 {
	if x != nil {
		return x.FilledOppositeAmount
	}
	return 0
}

func (x *Order) GetFeeAmount() uint64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

func (x *Order) GetTPFilledAmount() uint64 {
	if x != nil {
		return x.TPFilledAmount
	}
	return 0
}

func (x *Order) GetSLFilledAmount() uint64 {
	if x != nil {
		return x.SLFilledAmount
	}
	return 0
}

func (x *Order) GetLockedFunds() uint64 {
	if x != nil {
		return x.LockedFunds
	}
	return 0
}

func (x *Order) GetTPOrderId() uint64 {
	if x != nil {
		return x.TPOrderId
	}
	return 0
}

func (x *Order) GetSLOrderId() uint64 {
	if x != nil {
		return x.SLOrderId
	}
	return 0
}

func (x *Order) GetRootOrderId() uint64 {
	if x != nil {
		return x.RootOrderId
	}
	return 0
}

func (x *Order) GetTPStatus() OrderStatus {
	if x != nil {
		return x.TPStatus
	}
	return OrderStatus_Pending
}

func (x *Order) GetSLStatus() OrderStatus {
	if x != nil {
		return x.SLStatus
	}
	return OrderStatus_Pending
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8a, 0x0a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f,
	0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x53,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x4f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x4f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f,
	0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x55, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x15, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x55,
	0x73, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x50, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x54, 0x50, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x4c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x53, 0x4c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x54, 0x50, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x4c,
	0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x53, 0x4c, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x50, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x50, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x4c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x53, 0x4c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x54, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x54, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2d, 0x0a, 0x08, 0x53, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x53, 0x4c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2a, 0x1f, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x64, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x75, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x10,
	0x01, 0x2a, 0x62, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x43, 0x4f, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x54, 0x4f, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x64, 0x64, 0x6c,
	0x65, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x10, 0x06, 0x2a, 0x59, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x46, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x04,
	0x2a, 0x29, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x6f, 0x73, 0x73, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x23, 0x0a,
	0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x61, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x10, 0x01, 0x2a, 0x39, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x10, 0x01, 0x42, 0x08, 0x5a,
	0x06, 0x2e, 0x3b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_order_proto_goTypes = []interface{}{
	(MarketSide)(0),                // 0: data.MarketSide
	(OrderType)(0),                 // 1: data.OrderType
	(OrderStatus)(0),               // 2: data.OrderStatus
	(StopLoss)(0),                  // 3: data.StopLoss
	(CommandType)(0),               // 4: data.CommandType
	(AccountGroup)(0),              // 5: data.AccountGroup
	(TrailingStopPriceTypeType)(0), // 6: data.TrailingStopPriceTypeType
	(*Order)(nil),                  // 7: data.Order
}
var file_order_proto_depIdxs = []int32{
	4,  // 0: data.Order.EventType:type_name -> data.CommandType
	1,  // 1: data.Order.Type:type_name -> data.OrderType
	0,  // 2: data.Order.Side:type_name -> data.MarketSide
	3,  // 3: data.Order.Stop:type_name -> data.StopLoss
	2,  // 4: data.Order.Status:type_name -> data.OrderStatus
	1,  // 5: data.Order.OtoType:type_name -> data.OrderType
	5,  // 6: data.Order.AccountGroup:type_name -> data.AccountGroup
	6,  // 7: data.Order.TrailingStopPriceType:type_name -> data.TrailingStopPriceTypeType
	2,  // 8: data.Order.TPStatus:type_name -> data.OrderStatus
	2,  // 9: data.Order.SLStatus:type_name -> data.OrderStatus
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		EnumInfos:         file_order_proto_enumTypes,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
